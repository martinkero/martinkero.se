{"version":3,"sources":["components/Card.tsx","components/Link.tsx","components/Divider.tsx","fonts/open-sans-v17-latin-regular.woff2","fonts/open-sans-v17-latin-600.woff2","fonts/fonts.tsx","theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledCard","styled","section","theme","colors","gray","blueLight","Header","header","props","fontSize","medium","Footer","footer","Card","content","headerFontSize","Link","href","text","target","rel","Line","div","Container","Divider","createGlobalStyle","OpenSansRegular","OpenSansBold","blue","font","small","large","GlobalStyle","Cards","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAUMA,EAAaC,IAAOC,QAAV,wMAEM,qBAAGC,MAAkBC,OAAOC,QAErC,qBAAGF,MAAkBC,OAAOC,QACjB,qBAAGF,MAAkBC,OAAOE,aAQ9CC,EAASN,IAAOO,OAAV,4FACG,SAACC,GAAD,OAAWA,EAAMC,UAAYD,EAAMN,MAAMO,SAASC,UAK3DC,EAASX,IAAOY,OAAV,qGAMCC,EAAO,SAAC,GAAD,IAAGN,EAAH,EAAGA,OAAQO,EAAX,EAAWA,QAASF,EAApB,EAAoBA,OAAQG,EAA5B,EAA4BA,eAA5B,OAClB,eAAChB,EAAD,WACE,cAACO,EAAD,CAAQG,SAAUM,EAAlB,SAAmCR,IAClCO,EACAF,GAAU,cAACD,EAAD,UAASC,QChCXI,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OAClB,mBAAGD,KAAMA,EAAME,OAAO,SAASC,IAAI,sBAAnC,SACGF,KCFCG,EAAOrB,IAAOsB,IAAV,iIAGY,qBAAGpB,MAAkBC,OAAOC,QAK5CmB,EAAYvB,IAAOsB,IAAV,+NAKJ,qBAAGpB,MAAkBC,OAAOC,OAGjCiB,GAMOG,EAAU,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAH,OACrB,eAACK,EAAD,WACE,cAACF,EAAD,IACA,8BAAMH,IACN,cAACG,EAAD,QCjCW,MAA0B,0DCA1B,MAA0B,sDCK1BI,cAAf,2ZAKsEC,EAMEC,GCAzDzB,EAdoB,CACjCC,OAAQ,CACNyB,KAAM,UACNvB,UAAW,UACXD,KAAM,WAERyB,KAAM,YACNpB,SAAU,CACRqB,MAAO,OACPpB,OAAQ,UACRqB,MAAO,SCHLC,EAAcP,YAAH,mKAGA,qBAAGvB,MAAkBO,SAASqB,SACvB,qBAAG5B,MAAkBC,OAAOyB,QAO9CK,EAAQjC,IAAOsB,IAAV,yEAKLX,EAASX,IAAOY,OAAV,8HAMC,qBAAGV,MAAkBC,OAAOC,QA6D1B8B,EAzDH,WACV,OACE,mCACE,eAAC,IAAD,CAAehC,MAAOA,EAAtB,UACE,cAAC8B,EAAD,IACA,cAAC,EAAD,IACA,eAACC,EAAD,WACE,cAAC,EAAD,CACE1B,OAAO,cACPO,QAAQ,4DACRF,OACE,qCACE,cAAC,EAAD,CAAMK,KAAK,mDAAmDC,KAAK,aACnE,cAAC,EAAD,CAAMD,KAAK,gCAAgCC,KAAK,cAGpDH,eAAgBb,EAAMO,SAASsB,QAEjC,cAAC,EAAD,CAASb,KAAK,UACd,cAAC,EAAD,CACEX,OAAO,cACPO,QACE,+BACE,sCACA,4CACA,wCACA,+CACA,4CAIN,cAAC,EAAD,CAASI,KAAK,SACd,cAAC,EAAD,CACEX,OAAO,UACPO,QACE,+BACE,gDACA,gDACA,yCACA,sCACA,wCACA,+CACA,wDACA,8CAIN,cAAC,EAAD,CAASI,KAAK,YAEhB,cAAC,EAAD,UACE,cAAC,EAAD,CAAMD,KAAK,4DAA4DC,KAAK,sBCzElEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05fb3b03.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface args {\n  header: string;\n  content: React.ReactNode;\n  footer?: React.ReactNode;\n  headerFontSize?: string;\n}\n\nconst StyledCard = styled.section`\n  padding: 1.5rem;\n  background-color: ${({ theme }) => theme.colors.gray};\n  a {\n    color: ${({ theme }) => theme.colors.gray};\n    background-color: ${({ theme }) => theme.colors.blueLight};\n    padding: 0.6rem;\n  }\n  a:hover {\n    transform: scale(1.05);\n  }\n`;\n\nconst Header = styled.header<{ fontSize?: string }>`\n  font-size: ${(props) => props.fontSize || props.theme.fontSize.medium};\n  font-weight: 600;\n  margin-bottom: 1rem;\n`;\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: space-evenly;\n  margin-top: 2rem;\n`;\n\nexport const Card = ({ header, content, footer, headerFontSize }: args) => (\n  <StyledCard>\n    <Header fontSize={headerFontSize}>{header}</Header>\n    {content}\n    {footer && <Footer>{footer}</Footer>}\n  </StyledCard>\n);\n","import React from \"react\";\n\ninterface args {\n  href: string;\n  text: string;\n}\n\nexport const Link = ({ href, text }: args) => (\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\n    {text}\n  </a>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface args {\n  text: string;\n}\n\nconst Line = styled.div`\n  width: 1px;\n  height: 100%;\n  background-color: ${({ theme }) => theme.colors.gray};\n  margin: 0.25rem;\n  max-height: 1.5rem;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 5rem;\n  color: ${({ theme }) => theme.colors.gray};\n  margin: 0.25rem;\n  &:last-child {\n    ${Line}:last-child {\n      display: none;\n    }\n  }\n`;\n\nexport const Divider = ({ text }: args) => (\n  <Container>\n    <Line />\n    <div>{text}</div>\n    <Line />\n  </Container>\n);\n","export default __webpack_public_path__ + \"static/media/open-sans-v17-latin-regular.f57a62e9.woff2\";","export default __webpack_public_path__ + \"static/media/open-sans-v17-latin-600.95264708.woff2\";","import { createGlobalStyle } from \"styled-components\";\n\nimport OpenSansRegular from \"./open-sans-v17-latin-regular.woff2\";\nimport OpenSansBold from \"./open-sans-v17-latin-600.woff2\";\n\nexport default createGlobalStyle`\n  @font-face {\n    font-family: \"Open Sans\";\n    font-style: normal;\n    font-weight: 400;\n    src: local(\"Open Sans Regular\"), local(\"OpenSans-Regular\"), url(${OpenSansRegular}) format(\"woff2\");\n  }\n  @font-face {\n    font-family: \"Open Sans\";\n    font-style: normal;\n    font-weight: 600;\n    src: local(\"Open Sans SemiBold\"), local(\"OpenSans-SemiBold\"), url(${OpenSansBold}) format(\"woff2\");\n  }\n`;\n","import { DefaultTheme } from \"styled-components\";\n\nexport const theme: DefaultTheme = {\n  colors: {\n    blue: \"#2d3748\",\n    blueLight: \"#3c4960\",\n    gray: \"#cbd5e0\",\n  },\n  font: \"Open Sans\",\n  fontSize: {\n    small: \"1rem\",\n    medium: \"1.25rem\",\n    large: \"2rem\",\n  },\n};\n\nexport default theme;\n","import React from \"react\";\nimport { Card } from \"./components/Card\";\nimport { Link } from \"./components/Link\";\nimport { Divider } from \"./components/Divider\";\nimport styled, { createGlobalStyle, DefaultTheme } from \"styled-components\";\nimport { ThemeProvider } from \"styled-components\";\nimport GlobalFonts from \"./fonts/fonts\";\nimport theme from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle<{ theme: DefaultTheme }>`\n  body {\n    font-family: \"Open Sans\";\n    font-size: ${({ theme }) => theme.fontSize.small};\n    background-color: ${({ theme }) => theme.colors.blue};\n  }\n  a {\n    text-decoration: none;\n  }\n`;\n\nconst Cards = styled.div`\n  max-width: 31rem;\n  margin: 8rem auto 0;\n`;\n\nconst Footer = styled.footer`\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  padding: 0.5rem;\n  a {\n    color: ${({ theme }) => theme.colors.gray};\n  }\n`;\n\nconst App = () => {\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <GlobalFonts />\n        <Cards>\n          <Card\n            header=\"Martin Kero\"\n            content=\"Autodidact developer currently located in northern Sweden\"\n            footer={\n              <>\n                <Link href=\"https://www.linkedin.com/in/martin-kero-63308950\" text=\"LinkedIn\" />\n                <Link href=\"https://github.com/martinkero\" text=\"GitHub\" />\n              </>\n            }\n            headerFontSize={theme.fontSize.large}\n          />\n          <Divider text=\"Today\" />\n          <Card\n            header=\"Nordic Peak\"\n            content={\n              <ul>\n                <li>Java</li>\n                <li>Javascript</li>\n                <li>jQuery</li>\n                <li>OpenHierarchy</li>\n                <li>MySQL</li>\n              </ul>\n            }\n          />\n          <Divider text=\"2018\" />\n          <Card\n            header=\"ClearIT\"\n            content={\n              <ul>\n                <li>Linux sysadmin</li>\n                <li>Asterisk / SIP</li>\n                <li>Support</li>\n                <li>Java</li>\n                <li>Golang</li>\n                <li>JasperReports</li>\n                <li>OracleSQL / PostgreSQL</li>\n                <li>MongoDB</li>\n              </ul>\n            }\n          />\n          <Divider text=\"2014\" />\n        </Cards>\n        <Footer>\n          <Link href=\"https://app.travis-ci.com/github/martinkero/martinkero.se\" text=\"Travis CI\" />\n        </Footer>\n      </ThemeProvider>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}