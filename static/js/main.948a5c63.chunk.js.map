{"version":3,"sources":["components/card/Card.tsx","components/link/Link.tsx","components/divider/Divider.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","header","text","footer","className","Link","href","target","rel","Divider","year","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAQaA,G,UAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,OAAjB,OAClB,yBAAKC,UAAU,kDACZH,EACD,iCAAUC,GACTC,KCJQE,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMJ,EAAT,EAASA,KAAME,EAAf,EAAeA,UAAf,OAClB,uBAAGE,KAAMA,EAAMC,OAAO,SAASC,IAAI,sBAAsBJ,UAAWA,GACjEF,ICJQO,EAAU,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KACxB,OAAKA,EAIH,yBAAKN,UAAU,gDACb,yBAAKA,UAAU,4BACf,yBAAKA,UAAU,6BAA6BM,GAC5C,yBAAKN,UAAU,6BANV,yBAAKA,UAAU,UCyBXO,EA5BH,kBACV,yBAAKP,UAAU,4FACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CACEH,OACE,4BAAQG,UAAU,+BAChB,2CAGJF,KAAM,uEACNC,OACE,4BAAQC,UAAU,4BAChB,kBAAC,EAAD,CAAME,KAAK,mDAAmDJ,KAAK,WAAWE,UAAU,8CACxF,kBAAC,EAAD,CAAME,KAAK,gCAAgCJ,KAAK,SAASE,UAAU,iDAIzE,kBAAC,EAAD,CAASM,KAAK,UACd,kBAAC,EAAD,CAAMR,KAAK,gBACX,kBAAC,EAAD,CAASQ,KAAK,SACd,kBAAC,EAAD,CAAMR,KAAK,yBAEb,4BAAQE,UAAU,gCAChB,kBAAC,EAAD,CAAME,KAAK,wDAAwDJ,KAAK,YAAYE,UAAU,qBChBhFQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.948a5c63.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface args {\n  text: React.ReactNode;\n  header?: React.ReactNode;\n  footer?: React.ReactNode;\n}\n\nexport const Card = ({ header, text, footer }: args) => (\n  <div className=\"card  bg-gray-400 text-gray-900 rounded-lg p-4\">\n    {header}\n    <section>{text}</section>\n    {footer}\n  </div>\n);\n","import React from \"react\";\n\ninterface args {\n  href: string;\n  text: string;\n  className?: string;\n}\n\nexport const Link = ({ href, text, className }: args) => (\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\" className={className}>\n    {text}\n  </a>\n);\n","import React from \"react\";\n\ninterface args {\n  year?: string;\n}\n\nexport const Divider = ({ year }: args) => {\n  if (!year) {\n    return <div className=\"h-20\"></div>;\n  }\n  return (\n    <div className=\"max-w-lg h-20 flex flex-col items-center p-2\">\n      <div className=\"w-px bg-gray-400 h-full\"></div>\n      <div className=\"text-center text-gray-400\">{year}</div>\n      <div className=\"w-px bg-gray-400 h-full\"></div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Card } from \"../card/Card\";\nimport { Link } from \"../link/Link\";\nimport { Divider } from \"../divider/Divider\";\n\nconst App = () => (\n  <div className=\"app h-full w-full flex flex-col items-center justify-center bg-gray-800 text-h mt-20 p-5\">\n    <div className=\"max-w-lg w-full\">\n      <Card\n        header={\n          <header className=\"text-4xl font-semibold mb-5\">\n            <p>Martin Kero</p>\n          </header>\n        }\n        text={<div>Developer currently focused on backend</div>}\n        footer={\n          <footer className=\"flex justify-evenly mt-8\">\n            <Link href=\"https://www.linkedin.com/in/martin-kero-63308950\" text=\"LinkedIn\" className=\"p-2 font-semibold hover:shadow rounded-lg\" />\n            <Link href=\"https://github.com/martinkero\" text=\"GitHub\" className=\"p-2 font-semibold hover:shadow rounded-lg\" />\n          </footer>\n        }\n      />\n      <Divider year=\"Today\" />\n      <Card text=\"Nordic Peak\" />\n      <Divider year=\"2018\" />\n      <Card text=\"ClearIT 2014 - 2018\" />\n    </div>\n    <footer className=\"absolute bottom-0 left-0 p-2\">\n      <Link href=\"https://travis-ci.org/github/martinkero/martinkero.se\" text=\"Travis CI\" className=\"text-gray-400\" />\n    </footer>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./tailwind/output.css\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}