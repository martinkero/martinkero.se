{"version":3,"sources":["components/Card.tsx","components/Link.tsx","components/Divider.tsx","fonts/open-sans-v17-latin-regular.woff2","fonts/open-sans-v17-latin-600.woff2","fonts/fonts.tsx","theme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledCard","styled","section","theme","colors","gray","blueLight","Header","header","props","fontSize","medium","Footer","footer","Card","content","headerFontSize","Link","href","text","target","rel","Line","div","Container","Divider","createGlobalStyle","OpenSansRegular","OpenSansBold","blue","font","small","large","GlobalStyle","Cards","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uMAUMA,EAAaC,IAAOC,QAAV,wMAEM,qBAAGC,MAAkBC,OAAOC,QAErC,qBAAGF,MAAkBC,OAAOC,QACjB,qBAAGF,MAAkBC,OAAOE,aAQ9CC,EAASN,IAAOO,OAAV,4FACG,SAACC,GAAD,OAAWA,EAAMC,UAAYD,EAAMN,MAAMO,SAASC,UAK3DC,EAASX,IAAOY,OAAV,qGAMCC,EAAO,SAAC,GAAD,IAAGN,EAAH,EAAGA,OAAQO,EAAX,EAAWA,QAASF,EAApB,EAAoBA,OAAQG,EAA5B,EAA4BA,eAA5B,OAClB,eAAChB,EAAD,WACE,cAACO,EAAD,CAAQG,SAAUM,EAAlB,SAAmCR,IAClCO,EACAF,GAAU,cAACD,EAAD,UAASC,QChCXI,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAT,OAClB,mBAAGD,KAAMA,EAAME,OAAO,SAASC,IAAI,sBAAnC,SACGF,KCFCG,EAAOrB,IAAOsB,IAAV,iIAGY,qBAAGpB,MAAkBC,OAAOC,QAK5CmB,EAAYvB,IAAOsB,IAAV,+NAKJ,qBAAGpB,MAAkBC,OAAOC,OAGjCiB,GAMOG,EAAU,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAH,OACrB,eAACK,EAAD,WACE,cAACF,EAAD,IACA,8BAAMH,IACN,cAACG,EAAD,QCjCW,MAA0B,0DCA1B,MAA0B,sDCK1BI,cAAf,2ZAKsEC,EAMEC,GCAzDzB,EAdoB,CACjCC,OAAQ,CACNyB,KAAM,UACNvB,UAAW,UACXD,KAAM,WAERyB,KAAM,YACNpB,SAAU,CACRqB,MAAO,OACPpB,OAAQ,UACRqB,MAAO,SCHLC,EAAcP,YAAH,mKAGA,qBAAGvB,MAAkBO,SAASqB,SACvB,qBAAG5B,MAAkBC,OAAOyB,QAO9CK,EAAQjC,IAAOsB,IAAV,yEAKLX,EAASX,IAAOY,OAAV,8HAMC,qBAAGV,MAAkBC,OAAOC,QA6D1B8B,EAzDH,WACV,OACE,mCACE,eAAC,IAAD,CAAehC,MAAOA,EAAtB,UACE,cAAC8B,EAAD,IACA,cAAC,EAAD,IACA,eAACC,EAAD,WACE,cAAC,EAAD,CACE1B,OAAO,cACPO,QAAQ,4DACRF,OACE,qCACE,cAAC,EAAD,CAAMK,KAAK,mDAAmDC,KAAK,aACnE,cAAC,EAAD,CAAMD,KAAK,gCAAgCC,KAAK,cAGpDH,eAAgBb,EAAMO,SAASsB,QAEjC,cAAC,EAAD,CAASb,KAAK,UACd,cAAC,EAAD,CACEX,OAAO,cACPO,QACE,+BACE,sCACA,4CACA,wCACA,+CACA,4CAIN,cAAC,EAAD,CAASI,KAAK,SACd,cAAC,EAAD,CACEX,OAAO,UACPO,QACE,+BACE,gDACA,gDACA,yCACA,sCACA,wCACA,+CACA,wDACA,8CAIN,cAAC,EAAD,CAASI,KAAK,YAEhB,cAAC,EAAD,UACE,cAAC,EAAD,CAAMD,KAAK,wDAAwDC,KAAK,sBCzE9DiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6402a071.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface args {\r\n  header: string;\r\n  content: React.ReactNode;\r\n  footer?: React.ReactNode;\r\n  headerFontSize?: string;\r\n}\r\n\r\nconst StyledCard = styled.section`\r\n  padding: 1.5rem;\r\n  background-color: ${({ theme }) => theme.colors.gray};\r\n  a {\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    background-color: ${({ theme }) => theme.colors.blueLight};\r\n    padding: 0.6rem;\r\n  }\r\n  a:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nconst Header = styled.header<{ fontSize?: string }>`\r\n  font-size: ${(props) => props.fontSize || props.theme.fontSize.medium};\r\n  font-weight: 600;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nexport const Card = ({ header, content, footer, headerFontSize }: args) => (\r\n  <StyledCard>\r\n    <Header fontSize={headerFontSize}>{header}</Header>\r\n    {content}\r\n    {footer && <Footer>{footer}</Footer>}\r\n  </StyledCard>\r\n);\r\n","import React from \"react\";\r\n\r\ninterface args {\r\n  href: string;\r\n  text: string;\r\n}\r\n\r\nexport const Link = ({ href, text }: args) => (\r\n  <a href={href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n    {text}\r\n  </a>\r\n);\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface args {\r\n  text: string;\r\n}\r\n\r\nconst Line = styled.div`\r\n  width: 1px;\r\n  height: 100%;\r\n  background-color: ${({ theme }) => theme.colors.gray};\r\n  margin: 0.25rem;\r\n  max-height: 1.5rem;\r\n`;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  height: 5rem;\r\n  color: ${({ theme }) => theme.colors.gray};\r\n  margin: 0.25rem;\r\n  &:last-child {\r\n    ${Line}:last-child {\r\n      display: none;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Divider = ({ text }: args) => (\r\n  <Container>\r\n    <Line />\r\n    <div>{text}</div>\r\n    <Line />\r\n  </Container>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/open-sans-v17-latin-regular.f57a62e9.woff2\";","export default __webpack_public_path__ + \"static/media/open-sans-v17-latin-600.95264708.woff2\";","import { createGlobalStyle } from \"styled-components\";\r\n\r\nimport OpenSansRegular from \"./open-sans-v17-latin-regular.woff2\";\r\nimport OpenSansBold from \"./open-sans-v17-latin-600.woff2\";\r\n\r\nexport default createGlobalStyle`\r\n  @font-face {\r\n    font-family: \"Open Sans\";\r\n    font-style: normal;\r\n    font-weight: 400;\r\n    src: local(\"Open Sans Regular\"), local(\"OpenSans-Regular\"), url(${OpenSansRegular}) format(\"woff2\");\r\n  }\r\n  @font-face {\r\n    font-family: \"Open Sans\";\r\n    font-style: normal;\r\n    font-weight: 600;\r\n    src: local(\"Open Sans SemiBold\"), local(\"OpenSans-SemiBold\"), url(${OpenSansBold}) format(\"woff2\");\r\n  }\r\n`;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const theme: DefaultTheme = {\r\n  colors: {\r\n    blue: \"#2d3748\",\r\n    blueLight: \"#3c4960\",\r\n    gray: \"#cbd5e0\",\r\n  },\r\n  font: \"Open Sans\",\r\n  fontSize: {\r\n    small: \"1rem\",\r\n    medium: \"1.25rem\",\r\n    large: \"2rem\",\r\n  },\r\n};\r\n\r\nexport default theme;\r\n","import React from \"react\";\r\nimport { Card } from \"./components/Card\";\r\nimport { Link } from \"./components/Link\";\r\nimport { Divider } from \"./components/Divider\";\r\nimport styled, { createGlobalStyle, DefaultTheme } from \"styled-components\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport GlobalFonts from \"./fonts/fonts\";\r\nimport theme from \"./theme\";\r\n\r\nconst GlobalStyle = createGlobalStyle<{ theme: DefaultTheme }>`\r\n  body {\r\n    font-family: \"Open Sans\";\r\n    font-size: ${({ theme }) => theme.fontSize.small};\r\n    background-color: ${({ theme }) => theme.colors.blue};\r\n  }\r\n  a {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst Cards = styled.div`\r\n  max-width: 31rem;\r\n  margin: 8rem auto 0;\r\n`;\r\n\r\nconst Footer = styled.footer`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  padding: 0.5rem;\r\n  a {\r\n    color: ${({ theme }) => theme.colors.gray};\r\n  }\r\n`;\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <GlobalStyle />\r\n        <GlobalFonts />\r\n        <Cards>\r\n          <Card\r\n            header=\"Martin Kero\"\r\n            content=\"Autodidact developer currently located in northern Sweden\"\r\n            footer={\r\n              <>\r\n                <Link href=\"https://www.linkedin.com/in/martin-kero-63308950\" text=\"LinkedIn\" />\r\n                <Link href=\"https://github.com/martinkero\" text=\"GitHub\" />\r\n              </>\r\n            }\r\n            headerFontSize={theme.fontSize.large}\r\n          />\r\n          <Divider text=\"Today\" />\r\n          <Card\r\n            header=\"Nordic Peak\"\r\n            content={\r\n              <ul>\r\n                <li>Java</li>\r\n                <li>Javascript</li>\r\n                <li>jQuery</li>\r\n                <li>OpenHierarchy</li>\r\n                <li>MySQL</li>\r\n              </ul>\r\n            }\r\n          />\r\n          <Divider text=\"2018\" />\r\n          <Card\r\n            header=\"ClearIT\"\r\n            content={\r\n              <ul>\r\n                <li>Linux sysadmin</li>\r\n                <li>Asterisk / SIP</li>\r\n                <li>Support</li>\r\n                <li>Java</li>\r\n                <li>Golang</li>\r\n                <li>JasperReports</li>\r\n                <li>OracleSQL / PostgreSQL</li>\r\n                <li>MongoDB</li>\r\n              </ul>\r\n            }\r\n          />\r\n          <Divider text=\"2014\" />\r\n        </Cards>\r\n        <Footer>\r\n          <Link href=\"https://travis-ci.org/github/martinkero/martinkero.se\" text=\"Travis CI\" />\r\n        </Footer>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}